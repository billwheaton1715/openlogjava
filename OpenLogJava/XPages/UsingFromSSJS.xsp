<?xml version="1.0" encoding="UTF-8"?>
<xp:view xmlns:xp="http://www.ibm.com/xsp/core" xmlns:xc="http://www.ibm.com/xsp/custom">

	<!--
		Copyright 2013 Paul Withers
		Licensed under the Apache License, Version 2.0 (the "License");
		you may not use this file except in compliance with the License.
		You may obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0

		Unless required by applicable law or agreed to in writing,
		software distributed under the License is distributed on an "AS IS" BASIS,
		WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		See the License for the specific language governing permissions and limitations under the License
	-->


	<xc:ccLayoutOneUI selected="using">
		<xp:this.facets>
			<xp:div xp:key="facet_1" style="text-align:center" id="panel1">
				<!-- Images -->
				<xp:image url="intec-logo-medium1.gif" id="image1"
					style="float:right" alt="Intec Systems Ltd">
				</xp:image>
				<xp:div styleClass="lotusInfoBox" style="clear:right;text-align:left;">
					<xp:text escape="false">
						<xp:this.value><![CDATA[Why have I added this?
						You'll notice there's no error handling in the SSJS in XPages Help Application.
						Matt White's OpenLogXPages script library in TaskJam is excellent and I've used it extensively.
						But it's not Apache-licensed, so I couldn't use it in XPages Help Application.
						So I've added a managed bean and code to aggregate all error or event messages
						and output in one go prior to rendering the response.<br/><br/> In addition it will log to
						OpenLog any error triggered because you do not have a try/catch block,
						but only if you have a custom error page in the application. This is because the error is
						retrieved from requestScope.error. If you use the standard error page
						or use no error page at all, requestScope.error is never encountered when an XPage is rendered.
						Note, however, that if you do not have a try/catch block only one error per page will be logged.
						The XSP Command Manager aborts as soon as an uncaught error is encountered.<br/><br/>
						To log a caught error, the following options are available:<ul>
						<li><i><b>openLogBean.addError(Exception, Object)</b></i>: pass the error object from your try/catch
						and a component/eventHandler. To avoid hard-coding, use <i><b>this</b></i> from a property or an event (so <br/><i>try{<br/>&nbsp;&nbsp;...<br/>} catch(e) {<br/>
						&nbsp;&nbsp;openLogBean.addError(e,this);<br/>}</i><br/>If no component is available,
						pass <i>null</i>.</li>
						<li><i><b>openLogBean.addError(Exception, Object, int)</b></i>: the extra parameter here is
						an integer, 1 to 7, corresponding to the Java Level logged. 1 is the most severe, 7 the least.</li>
						<li><i><b>openLogBean.addError(Exception, Object, int, string)</b></i>: the extra parameter here is
						the UNID of a NotesDocument to pass. It is not good practice to store Notes objects in a bean, so only pass
						the UNID. The code will attempt to retrieve the document from the current database. If that cannot be done
						the UNID will be added to the error logging message instead.</li>
						<li><i><b>openLogBean.addError(Exception, string, Object)</b></i>: the new second parameter
						is an extra message as a string. This provides the equivalent to logErrorEx. If there is no error, pass <i>null</i>.</li>
						<li><i><b>openLogBean.addError(Exception, string, Object, int)</b></i>: passing error object, additional
						message, component and error level.</li>
						<li><i><b>openLogBean.addError(Exception, string, Object, int, string)</b></i>: passing error object, additional
						message, component, error level and NotesDocument UNID.</li></ul><br/><br/>
						To log an event, the following options are available:<br/>
						<li><i><b>openLogBean.addEvent(string, Object)</b></i>: the first parameter is a message,
						the second parameter is the component to log against.</li>
						<li><i><b>openLogBean.addEvent(string, Object, int)</b></i>: the extra parameter is a
						warning level, 1 to 7, as in addError().</li>
						<li><i><b>openLogBean.addEvent(string, Object, int, string)</b></i>: the extra parameter is the
						UNID of a NotesDocuemnt to pass, as in addError().</li>
						</ul>]]>
						</xp:this.value>
					</xp:text>
				</xp:div>
			</xp:div>
		</xp:this.facets>
	</xc:ccLayoutOneUI>
</xp:view>
